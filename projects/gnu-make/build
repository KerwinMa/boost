#!/bin/bash
# -*- coding: UTF-8 -*-

# Script for building boost libraries for Linux, OSX, iOS and Android.


### Define text styles  ###########
TXT_C="tput setaf"    # set text color in BGR format
TXT_R="tput sgr0"     # reset text format
TXT_B="tput bold"     # set bold
TXT_U="tput sgr 0 1"  # set underlined


# Detect directory in which the script resides
BASEDIR=$(dirname "`[[ $0 == /* ]] && echo "$0" || echo "${PWD}/${0#./}"`")

# Define output directory if not defined yet
[ -z "$STAGING_PREFIX" ] && STAGING_PREFIX=$BASEDIR/../../staging
UNAME=$(uname)

validate_before(){
    [ $? != "0" ] && exit 1 || true
}


caption(){
	echo -e "\n`$TXT_B`Build script`$TXT_R` for building `$TXT_B`boost`$TXT_R` libraries for multiple platforms."
	echo -e "Maintainer: `$TXT_B`Predrag Mandic`$TXT_R` [`$TXT_U``$TXT_C 4`predrag@hookflash.com`$TXT_R`]`$TXT_R`"
}

help_darwin(){
	caption
	usage_darwin
	echo -e "`$TXT_B`\nOptions`$TXT_R`"
	echo -e "\t`$TXT_B`x86`$TXT_R` | x86_64 | i386"
	echo -e "\t\tAll of these options build the same libraries that work on OS X on a current processor architecture (32 or 64 bit). They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`arm`$TXT_R` | ios"
	echo -e "\t\tBoth of these options build the same libraries that work on iOS. They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`all`$TXT_R`"
	echo -e "\t\tBuilds both x86 and ios libraries."
	echo -e "\t`$TXT_B`clean`$TXT_R`"
	echo -e "\t\tDeletes staged libraries for all architectures."
	echo ""
}

usage_darwin(){
	echo "Usage: build {arm|x86|all|clean|help}"
}

usage_darwin_clean(){
	echo "Usage: build clean {arm|x86|all}"
}

help_linux(){
	caption
	usage_linux
	echo -e "`$TXT_B`\nOptions`$TXT_R`"
	echo -e "\t`$TXT_B`x86`$TXT_R` | x86_64 | i386"
	echo -e "\t\tAll of these options build the same libraries that work on Linux on a current processor architecture (32 or 64 bit). They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`arm`$TXT_R` | android"
	echo -e "\t\tBoth of these options build the same libraries that work on Android. They exist separately to solve legacy issues."
	echo -e "\t`$TXT_B`all`$TXT_R`"
	echo -e "\t\tBuilds both x86 and android libraries."
	echo -e "\t`$TXT_B`clean`$TXT_R`"
	echo -e "\t\tDeletes staged libraries for all architectures."
	echo ""
}

usage_linux(){
	echo "Usage: build {arm|x86|all|clean|help}"
}

usage_linux_clean(){
	echo "Usage: build clean {arm|x86|all}"
}

build_darwin(){
	echo "`$TXT_B``$TXT_C 2`boost build for OS X started...`$TXT_R`"

	cd $BASEDIR/../../boost
	
	#removing old user-config.jam
	touch ~/user-config.jam
	rm -f ~/user-config.jam; validate_before
	
	./bootstrap.sh --with-libraries=thread,date_time,regex ; validate_before
	./bjam clean; validate_before
	./bjam --prefix=$STAGING_PREFIX architecture=x86 address-model=32 link=static install ; validate_before
}

clean_darwin(){
	echo "Cleaning OSX architecture..."
	rm -rf $STAGING_PREFIX/include/boost
	rm -f $STAGING_PREFIX/lib/libboost_*
	echo "Done!"
}

build_ios(){
	export SDK=`system_profiler SPDeveloperToolsDataType | grep -A 1 iOS: | grep -v iOS: | grep -v -- -- | awk 'END {print $1}' | awk -F: '{print $1}'`
	#export ARCH="armv7"
	#build_ios_with_arm_version_set
	export ARCH="armv7s"
	build_ios_with_arm_version_set

	mkdir -p $STAGING_PREFIX/iPhoneOS/lib
	mkdir -p $STAGING_PREFIX/iPhoneOS/include/boost
	rm -rf $STAGING_PREFIX/iPhoneOS/include/boost
	cp -R $STAGING_PREFIX/iPhoneOS/$ARCH/include/boost $STAGING_PREFIX/iPhoneOS/include/boost
	#lipo -create $STAGING_PREFIX/iPhoneOS/armV7/lib/libboost_regex.a $STAGING_PREFIX/iPhoneOS/armv7s/lib/libboost_regex.a -output $STAGING_PREFIX/iPhoneOS/lib/libboost_regex.a
	#lipo -create $STAGING_PREFIX/iPhoneOS/armV7/lib/libboost_thread.a $STAGING_PREFIX/iPhoneOS/armv7s/lib/libboost_thread.a -output $STAGING_PREFIX/iPhoneOS/lib/libboost_thread.a
	#lipo -create $STAGING_PREFIX/iPhoneOS/armV7/lib/libboost_date_time.a $STAGING_PREFIX/iPhoneOS/armv7s/lib/libboost_date_time.a -output $STAGING_PREFIX/iPhoneOS/lib/libboost_date_time.a
	cp $STAGING_PREFIX/iPhoneOS/$ARCH/lib/libboost_* $STAGING_PREFIX/iPhoneOS/lib/
}

build_ios_with_arm_version_set() {
	if [ "$ARCH" == "" ]; then
		echo "`$TXT_C 1`ARM version not set! Exiting...`$TXT_R`"
		exit 1
	fi
	if [ "$SDK" == "" ]; then
		echo "`$TXT_C 1`SDK version not set! Exiting...`$TXT_R`"
		exit 1
	fi
	echo "`$TXT_B``$TXT_C 2`boost build for iOS started for arch:$ARCH and SDK:$SDK...`$TXT_R`"

    #export SDK="6.0"
    export DEVELOPER="/Applications/Xcode.app/Contents/Developer"
 
	echo "`$TXT_B``$TXT_C 2`boost build for iOS started...`$TXT_R`"
	
	cd $BASEDIR/../../boost
	
	#removing old user-config.jam
	touch ~/user-config.jam
	rm -f ~/user-config.jam; validate_before
	
	#creating user-config.jam
	echo """using darwin : $SDK~iphone
   : $DEVELOPER/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc -arch $ARCH -mthumb -fvisibility=hidden -fvisibility-inlines-hidden
   : <striper>
   : <architecture>arm <target-os>iphone
   ;
""" > ~/user-config.jam ; validate_before
	
	./bootstrap.sh --with-libraries=thread,date_time,regex ; validate_before
	
	./bjam --prefix=$STAGING_PREFIX/iPhoneOS/$ARCH toolset=darwin architecture=arm target-os=iphone macosx-version=iphone-${SDK} define=_LITTLE_ENDIAN link=static install ; validate_before
	#./bjam --prefix=$STAGING_PREFIX/iPhoneSimulator toolset=darwin architecture=x86 target-os=iphone macosx-version=iphonesim-${SDK} link=static install ; validate_before


	### LEGACY PROBLEM FIX ###################
	#cd "$STAGING_PREFIX"
	#	rm -rf iPhoneOS5.0
	#	ln -s iPhoneOS iPhoneOS5.0
	#	rm -rf iPhoneOS5.1
	#	ln -s iPhoneOS iPhoneOS5.1
	#	rm -rf iPhoneOS6.0
	#	ln -s iPhoneOS iPhoneOS6.0
	#cd -
}

clean_ios(){
	echo "Cleaning iOS architecture..."
	rm -rf $STAGING_PREFIX/iPhoneOS/include/boost
	rm -f $STAGING_PREFIX/iPhoneOS/lib/libboost_*
	rm -rf $STAGING_PREFIX/iPhoneOS/armv7s/include/boost
	rm -f $STAGING_PREFIX/iPhoneOS/armv7s/lib/libboost_*
	echo "Done!"
}

build_linux(){
	echo "`$TXT_B``$TXT_C 2`boost build for Linux started...`$TXT_R`"
	mkdir -p $STAGING_PREFIX; validate_before

	cd $BASEDIR/../../boost
	./bootstrap.sh --with-libraries=thread,date_time ; validate_before
	./bjam clean; validate_before
	./bjam --prefix=$STAGING_PREFIX cxxflags=-fPIC link=static install; validate_before
}

clean_linux(){
	echo "Cleaning Linux architecture..."
	rm -rf $STAGING_PREFIX/include/boost
	rm -f $STAGING_PREFIX/lib/libboost_*
	echo "Done!"
}

build_android(){
	echo -e "`$TXT_C 1`Android build is not working. Use help or contact maintainer for info.`$TXT_R`"
	exit 1
}

clean_android(){
	echo "Cleaning Android architecture..."
	echo -e "`$TXT_C 1`Android clean is not working. Use help or contact maintainer for info.`$TXT_R`"
	exit 1
}


case "$UNAME" in
	Linux)
		case "$1" in
			arm|android)
				build_android
				;;
			x86|x86_64|i386)
				build_linux
				;;
			all)
				build_linux
				build_android
				;;
			clean)
				case "$2" in
					x86|x86_64|i386)
					clean_linux
					;;
				arm|android)
					clean_android
					;;
				all)
					clean_linux
					clean_android
					;;
				*)
					usage_linux_clean
					exit 1
					;;
				esac
				;;
			help)
				help_linux
				;;
			*)
				usage_linux
				exit 1
				;;
		esac
		;;

	Darwin)
		case "$1" in
			arm|ios)
				build_ios
				;;
			x86|x86_64|i386|osx)
				build_darwin
				;;
			all)
				build_darwin
				build_ios
				;;
			clean)
				case "$2" in
					x86|x86_64|i386|osx)
					clean_darwin
					;;
				arm|ios)
					clean_ios
					;;
				all)
					clean_darwin
					clean_ios
					;;
				*)
					usage_darwin_clean
					exit 1
					;;
				esac
				;;
			help)
				help_darwin
				;;
			*)
				usage_darwin
				exit 1
				;;
		esac
		;;
	*)
		echo "`$TXT_B`$UNAME`$TXT_R`: `$TXT_C 1`operating system not supported`$TXT_R`"
		exit 1
		;;
esac

